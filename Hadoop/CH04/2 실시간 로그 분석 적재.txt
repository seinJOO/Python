
<실시간 로그/분석 적재>
- 스마트카 운전자의 실시간 운행 정보를 분석한 후 적재
- 작지만 대량으로 발생하는 메세지성 데이터를 실시간으로 분석(집계, 분류, 관계 등) 처리 -> 해당 결과를 인메모리에 저장해 주변 시스템과 빠르게 공유
- 하둡을 직접 이용하지는 않음 -> 영구 저장할 필요가 없기 때문에 !!
- 특정 크기로 모았다가 한꺼번에 적재하거나 대규모 트랜잭션 데이터를 처리하는 데 최적화된 칼럼 지향형 NoSQL 데이터베이스를 주로 사용

< HBase> :  하둡의 HDFS를 기반으로 설치 및 구성
- NoSQL 데이터베이스들은 데이터를 키/값(Key/Value) 구조로 단순화하고, 칼럼 또는 도큐먼트 형식의 제약사항이 적은 스키마 모델로 만들어 고성능 쓰기/읽기가 가능
-  HBase는 하둡 기반의 칼럼 지향(Column-Oriented) NoSQL 데이터베이스로서 스키마 변경이 자유롭고, 
   리전이라는 수십~수백 대의 분산 서버로 샤딩과 복제 등의 기능을 지원해 성능과 안정성을 보장
- MemStore : 휘발성이 있는, 데이터를 인메모리에 저장 및 관리하는 데이터 캐시 영역
- HFile : 데이터를 스토리지에 저장 및 관리하는 영구 저장영역

클라이언트가 데이터를 저장하기 전에 주키퍼를 통해 해당 HTable, HRegin의 위치 알아냄
    -> 클라이언트가 직접 HRegionServer로 연결되어서 MemStore에 저장
        -> HRegion의 상황에 따라 최적의 파일로 재구성 작업 진행됨
        -> 데이터가 HRegin에 없으면 하둡의 DataNode로부터도 찾아옴


<레디스> : 분산 캐시 시스템 & NoSQL 데이터베이스처럼 대규모 데이터 관리 능력도 갖춘 IMDG(In-Memory Data Grid) 소프트웨어
- 인메모리 데이터를 영구적으로 저장할 수 있는 스냇샵 기능을 제공
- 데이터의 유실에 대비해 AOF(Append Only File) 기능으로 정합성을 보장
(Master(쓰기 노드)-Slave(읽기 노드) 구조 -> Master에 쓰여진 데이터는 복제를 통해 Slave 노드로 복제되면서 데이터 정합성을 유지)
    => 마스터 서버 장애 발생을 대비해서 Sentinel 컴포넌트(노드 모니터링/제어)가 추가됨
- 분석한 결과를 빠르게 저장하면서 주변 시스템과 공유하기 위한 저장소로 레디스를 활용

예시 ) Storm에서 두 개의 경로로 분리 - HBase / 레디스
        -> HBase에는 운전자의 모든 상태 정보를 저장
        -> 레디스에는 운전자의 특정 패턴을 감지한 이벤트 결과(과속한 운전자 정보)만 저장


<스톰> : 스피드 데이터를 실시간으로 인메모리 상에서 병렬 처리하기 위한 소프트웨어
- 분산 데이터를 통제하기 위한 강력한 기능(분리, 정제, 통합, 집계 등)과 아키텍처도 제공

예시)  카프카의 Spout를 통해 유입되는 모든 운전자의 운행 정보 데이터는 두 개의 Bolt(HBase Bolt, Redis Bolt)로 나눠져서 처리됨
        ->  HBase Bolt는 모든 운행 정보를 정제 없이 HBase 서버에 곧바로 적재
        -> 레디스 Bolt는 에스퍼라는 룰 엔진이 감지한 이상 운행 패턴의 정보만 레디스 서버에 적재

* 실시간 분산 처리 유형
    완전 실시간 방식 : 데이터 발생과 동시에 처리 << 스톰!!!
    마이크로 배치 방식 : 발생한 데이터를 적재한 후 빠르게 배치를 실행


에스퍼 : 실시간 스트리밍 데이터의 복잡한 이벤트 처리가 필요할 때 사용하는 룰 엔진
- 실시간으로 발생하는 데이터 간의 관계를 복합적으로 판단 및 처리하는 CEP(Complex Event Processing) 기능 제공
- 분산된 응용 서버에 에스퍼 엔진을 설치하고, 에스퍼 엔진들이 동일한 EPL 룰을 동적으로 일괄 로딩하기 위해 EPL 공유 저장소가 이용됨
예시 ) EPL은 30초 동안의 평균 시속을 체크해서 80km/h를 초과하는 운전자 이벤트 정보를 실시간으로 감지할 수 있도록 룰을 정의
        ->  해당 이벤트 데이터는 감지 즉시 레디스에 적재되어 과속한 차량정보만 관리할 수 있음



< 실시간 적재 요구사항 구체화 분석 & 해결 방안 >

1. 1초 간격으로 발생하는 100명의 운행 정보(운행 정보 1건: 약 4KB)는 손실 없이 적재해야 한다.
    => 카프카와 스톰을 이용해 수집한 데이터에 대해 분산 처리 및 무결성을 보장하며, 분산 처리가 완료된 데이터는 HBase에 적재

2. 적재한 운행 정보를 대상으로 조건 검색이 가능해야하며, 필요 시 수정도 가능해야 한다.
    => HBase의 테이블에 적재된 데이터는 스캔 조건으로 검색하며, 저장 (Put) 기능을 이용해 기적재한 데이터에 대해 칼럼 기반으로 수정

3. 운전자의 운행 정보 중 30초를 기준으로 평균 속도가 80Km/h를 초과한 정보는 분리 적재한다.
    => 에스퍼의 EPL에서 사용자별로 운행 정보를 그루핑하고, 30초의 윈도우 타임(Window Time) 조건으로 평균 시속 집계 및 임계치별 이벤트를 정의

4. 과속한 차량을 분리 적재하기 위한 조건은 별도의 룰로 정의하고 쉽게 수정할 수 있어야 한다.
    => 과속 기준을 80Km/h에서 100Km/h로 변경해야 할 경우 EPL의 평균 속도를 체크하는 조건값만 수정

5. 분리 적재한 데이터는 외부 애플리케이션이 빠르게 접근하고 조회할 수 있게 해야 한다.
    => 실시간 이벤트로 감지된 데이터는 인메모리 기반 저장소인 레디스에 적재해서 외부 애플리케이션에서 빠르게 조회

6. 레디스에 적재한 데이터는 저장소의 공간을 효율적으로 사용하기 위해 1주일이 경과하면 영구적으로 삭제한다.
    => 레디스 클라이언트 라이브러리인 제디스(Jedis) 클라이언트를 이용해 데이터 적재 시 만료(Expire) 시간을 설정해 자동으로 영구 삭제 처리

7. 스톰의 실시간 데이터 처리
- 스톰은 카프카로부터 수신받은 운행 정보 데이터를 분산 처리하고, 최종 목적지 저장소에 적재하는 역할을 수행한다.
- 이때 빠르게 유입되는 데이터로부터 의미 있는 패턴을 발견하기 위해 에스퍼 엔진을 이용한다.
(1) 스톰의 Spout가 카프카의 토픽으로부터 운전자의 실시간 운행 정보를 수신받아 첫 번째 볼트에 전송한다. 
    해당 Bolt에서는 모든 운행 정보를 HBase Bolt로 전송하면서, 
    에스퍼의 EPL에서 정의한 조건에 따라 과속한 차량의 정보를 레디스 Bolt에 전송한다.
(2) HBase에 모든 운전자 운행 정보 적재
    HBase의 테이블에는 “차량번호+발생일시"를 로우키로 해서 8개의 칼럼(발생 일시, 차량 번호, 가속 페달, 브레
    이크 페달, 운전대 회전각, 방향지시등, 주행 속도, 주행 구역)의 구조로 모든 스마트카 운전자의 운행 정보가 적재된다.
(3) 레디스에 과속한 운전자 정보 적재
    레디스에 적재될 때는 현재 날짜를 키로 해서 과속한 차량의 정보를 세트 데이터 구조로 적재한다. 
    적재 영속 시간은 5시간으로 하며, 이후에 만료 처리되어 메모리에서 자동으로 삭제된다.